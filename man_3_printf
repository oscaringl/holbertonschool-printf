.TH _printf 3 "July 2023" "Holberton School"
.SH NAME
_printf \- custom implementation of the printf function
.SH SYNOPSIS
\fB#include "holberton.h"\fP
.PP
\fBint _printf(const char *format, ...)\fP;
.SH DESCRIPTION
The \fB_printf\fP function produces output according to a format.
.SH RETURN VALUE
The \fB_printf\fP function returns the number of characters printed (excluding the null byte used to end output to strings).
.SH FORMAT SPECIFIERS
The format string is composed of zero or more directives, which are special sequences that start with a percent sign (%). The supported conversion specifiers are as follows:
.TP
\fB%c\fP
Prints a single character.
.TP
\fB%s\fP
Prints a string of characters.
.TP
\fB%%\fP
Prints a percent sign.
.TP
\fB%d\fP, \fB%i\fP
Prints a signed decimal integer.
.TP
\fBu\fP
Prints an unsigned decimal integer.
.TP
\fBo\fP
Prints an unsigned octal integer.
.TP
\fBx\fP, \fBX\fP
Prints an unsigned hexadecimal integer (lowercase or uppercase, respectively).
.TP
\fB%b\fP
Prints an unsigned integer in binary format.
.TP
\fB%S\fP
Prints a string of characters, with non-printable characters represented as \x, followed by the ASCII code value in hexadecimal (upper case - always 2 characters).
.TP
\fB%p\fP
Prints a pointer address.
.TP
\fB%r\fP
Prints a reversed string.
.TP
\fB%R\fP
Prints a ROT13-encoded string.
.SH EXAMPLES
The following example demonstrates the usage of various format specifiers supported by \fB_printf\fP:
.PP
\fB#include "holberton.h"\fP
.PP
\fBint main(void)\fP
\fB{\fP
.PP
\fB_printf("%c\n", 'H');\fP
\fB_printf("%s\n", "Hello, World!");\fP
\fB_printf("%%\n");\fP
\fB_printf("%d\n", 12345);\fP
\fB_printf("%i\n", -98765);\fP
\fB_printf("%u\n", 4294967295);\fP
\fB_printf("%o\n", 1234567);\fP
\fB_printf("%x\n", 255);\fP
\fB_printf("%X\n", 255);\fP
\fB_printf("%b\n", 123);\fP
\fB_printf("%S\n", "Hello\tWorld!\n");\fP
\fB_printf("%p\n", &main);\fP
\fB_printf("%r\n", "Hello, World!");\fP
\fB_printf("%R\n", "Hello, World!");\fP
.PP
\fBreturn (0);\fP
\fB}\fP
.SH NOTES
The \fB_printf\fP function does not handle field width, precision, length modifiers, or flag characters. It uses a local buffer of 1024 characters to minimize the number of calls to the write function.
.SH SEE ALSO
printf(3), putchar(3), write(2)
.SH BUGS
The \fB_printf\fP function may not provide the same level of precision and behavior as the standard library printf function.
.SH AUTHOR
Written by Oscar Guerra.
